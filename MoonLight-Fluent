--// Discord Webhook for Player Stats
local webhookUrl = "https://discord.com/api/webhooks/1347902713278759022/jCE8Ar4pl7G5ATj5T9EscL1dU55SN6rz2yTMEiyVNd9XomLBWH1LBSOHpCxF4XqRfN5Y"
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local leaderstats = player:FindFirstChild("leaderstats")

--// Player Stats
local username = player.Name
local strength = leaderstats and leaderstats:FindFirstChild("Strength") and leaderstats.Strength.Value or "N/A"
local durability = leaderstats and leaderstats:FindFirstChild("Durability") and leaderstats.Durability.Value or "N/A"
local agility = leaderstats and leaderstats:FindFirstChild("Agility") and leaderstats.Agility.Value or "N/A"
local rebirths = leaderstats and leaderstats:FindFirstChild("Rebirths") and leaderstats.Rebirths.Value or "N/A"
local gems = player:FindFirstChild("Gems") and player.Gems.Value or "N/A"

--// Webhook Data
local data = {
    ["embeds"] = {{
        ["title"] = "Player Stats",
        ["color"] = tonumber(0x00ff00),
        ["fields"] = {
            {["name"] = "Username", ["value"] = username, ["inline"] = true},
            {["name"] = "Strength", ["value"] = tostring(strength), ["inline"] = true},
            {["name"] = "Durability", ["value"] = tostring(durability), ["inline"] = true},
            {["name"] = "Agility", ["value"] = tostring(agility), ["inline"] = true},
            {["name"] = "Rebirths", ["value"] = tostring(rebirths), ["inline"] = true},
            {["name"] = "Gems", ["value"] = tostring(gems), ["inline"] = true}
        }
    }}
}

--// Send Webhook
local body = HttpService:JSONEncode(data)
local headers = {["Content-Type"] = "application/json"}

if http_request then
    http_request({Url = webhookUrl, Method = "POST", Headers = headers, Body = body})
elseif syn and syn.request then
    syn.request({Url = webhookUrl, Method = "POST", Headers = headers, Body = body})
else
    warn("No HTTP request method found!")
end

--// Fluent UI Setup
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "MoonHub " .. Fluent.Version,
    SubTitle = "by Moonlight×Godlike",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

--// Tabs
local Tabs = {
    Main = Window:AddTab({Title = "Main", Icon = "Anchor"}),
    AutoWeight = Window:AddTab({Title = "Auto Weight", Icon = "Muscle"}),
    TPGyms = Window:AddTab({Title = "TP Gyms", Icon = "Clock"}),
    AutoRebirth = Window:AddTab({Title = "Auto Rebirth", Icon = "Codesandbox"}),
    Credits = Window:AddTab({Title = "Credits", Icon = "Heart"})
}

--// Destroy Ad Portal
Tabs.Main:AddToggle("DestroyAdPortal", {
    Title = "Destroy AD portal",
    Description = "Destroys the annoying ad portal",
    Default = false,
    Callback = function(state)
        local portal = workspace:FindFirstChild("RobloxForwardPortals")
        if state and portal then
            portal:Destroy()
            print("Ad portal destroyed.")
        end
    end
})

--// Anti AFK
Tabs.Main:AddToggle("AntiAFK", {
    Title = "Anti AFK",
    Description = "Prevents being kicked for idling",
    Default = false,
    Callback = function(state)
        if state then
            loadstring(game:HttpGet("https://raw.githubusercontent.com/evxncodes/mainroblox/main/anti-afk", true))()
        end
    end
})

--// Anti Lag
Tabs.Main:AddToggle("AntiLag", {
    Title = "Anti Lag",
    Description = "Reduces lag (placeholder)",
    Default = false,
    Callback = function(state)
        print(state and "Anti-Lag Enabled" or "Anti-Lag Disabled")
    end
})

--// Auto Join Brawl
local autoJoinToggle = false
Tabs.Main:AddToggle("AutoJoinBrawl", {
    Title = "Auto Join Brawl",
    Description = "Automatically join brawl events",
    Default = false,
    Callback = function(state)
        autoJoinToggle = state
        if state then
            task.spawn(function()
                while autoJoinToggle do
                    game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                    task.wait(2)
                end
            end)
        end
    end
})

--// God Mode Brawl
local godModeToggle = false
Tabs.Main:AddToggle("GodModeBrawl", {
    Title = "GOD MODE [BRAWL]",
    Description = "Invincibility in Brawls",
    Default = false,
    Callback = function(state)
        godModeToggle = state
        if state then
            task.spawn(function()
                while godModeToggle do
                    game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                    task.wait()
                end
            end)
        end
    end
})

--// Credits Section
local CreditSection = Tabs.Credits:AddSection("Credits")
CreditSection:AddLabel("Co-developers: xeno")
CreditSection:AddLabel("Testers: H3LL_TheSouthGoat")
CreditSection:AddLabel("Trusted friends: Xeno, TheSouthGoat, Billy")
CreditSection:AddLabel("Moonlight×Godlike")

--// Auto Rebirth
local Settings = {
    Rebirth = false,
    MaxRebirths = 100
}

local function notify(title, text, duration)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

local function getRebirthCount()
    return player.leaderstats and player.leaderstats:FindFirstChild("Rebirths") and player.leaderstats.Rebirths.Value or 0
end

local function autoRebirthLoop()
    while Settings.Rebirth do
        task.wait(0.5)
        if getRebirthCount() >= Settings.MaxRebirths then
            Settings.Rebirth = false
            notify("Auto Rebirth", "Target rebirths reached. Auto Rebirth turned off.", 5)
            break
        end
        game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
    end
end

Tabs.AutoRebirth:AddToggle("AutoRebirthTarget", {
    Title = "Auto Rebirth Target",
    Description = "Rebirths until a target is reached",
    Default = false,
    Callback = function(state)
        Settings.Rebirth = state
        if state then
            task.spawn(autoRebirthLoop)
        else
            print("Auto Rebirth Disabled")
        end
    end
})
